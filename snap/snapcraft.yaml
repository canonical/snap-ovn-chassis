name: ovn-chassis
adopt-info: ovn
base: core22
summary: Open vSwitch and Open Virtual Network chassis components
description: |
 The ovn-chassis snap provides Open vSwitch (OVS) and the Open Virtual Network
 (OVN) distributed controller.  Together they form the data plane components
 of OVN.

 Open vSwitch is a multilayer software switch.  OVS's goal is to implement a
 production quality switch platform that supports standard management
 interfaces and opens the forwarding functions to programmatic extension and
 control.

 OVN, the Open Virtual Network, is a system to support virtual network
 abstraction.  OVN complements the existing capabilities of OVS to add
 native support for virtual network abstractions, such as virtual L2 and L3
 overlays and security groups.
icon: snap/local/ovn-logo.png
grade: stable
license: Apache-2.0 OR BSD-3-Clause OR BSD-2-Clause OR GPL-2.0-only OR LGPL-2.1-only OR SISSL OR ISC OR Unlicense
confinement: classic
environment:
  # To enable execution of binaries from snap, and the host operating system,
  # we patch all ELF binaries shipped with the snap in the 'patchelf' part
  # instead of using the LD_LIBRARY_PATH environment variable.
  #
  # This is required because both libc and other standard libraries hard code
  # the path to /bin/sh, and uses that to execute other binaries.  The path to
  # /bin/sh is part of POSIX, so we can't really blame them.  Any attempt to
  # execute /bin/sh from host operating system with LD_LIBRARY_PATH pointing
  # to the snap will make the execution abort or fault.
  LD_LIBRARY_PATH: ""
  LC_ALL: C
  PATH: $SNAP/usr/sbin:$SNAP/usr/bin:$SNAP/bin:$PATH
  # OVN runtime configuration
  OVN_LOGDIR: $SNAP_COMMON/log/ovn
  OVN_RUNDIR: $SNAP_COMMON/run/ovn
  OVN_SYSCONFDIR: $SNAP_COMMON/etc
  OVN_PKGDATADIR: $SNAP/usr/share/ovn
  OVN_BINDIR: $SNAP/usr/bin
  OVN_SBINDIR: $SNAP/usr/sbin
  # OVS runtime configuration
  OVS_LOGDIR: $SNAP_COMMON/log/openvswitch
  OVS_RUNDIR: $SNAP_COMMON/run/openvswitch
  RUNTIME_DIRECTORY: $SNAP_COMMON/run/dpdk
  OVS_SYSCONFDIR: $SNAP_COMMON/etc
  OVS_PKGDATADIR: $SNAP/usr/share/openvswitch
  OVS_BINDIR: $SNAP/usr/bin
  OVS_SBINDIR: $SNAP/usr/sbin
  # P4 OVS Python commands
  PYTHONHOME: $SNAP
  PYTHONPATH: $SNAP/usr/lib/python3.10:$SNAP/lib/python3.10/site-packages:$SNAP/usr/lib/python3/dist-packages:/snap/core22/current/usr/lib/python3.10/lib-dynload:/snap/core22/current/usr/lib/python3.10:/snap/core22/current/usr/lib/python3/dist-packages

apps:
  # Openvswitch
  ovs-vswitchd:
    command: bin/ovs-wrapper $SNAP/usr/share/openvswitch/scripts/ovs-ctl --no-ovsdb-server --no-monitor start
    stop-command: usr/share/openvswitch/scripts/ovs-ctl --no-ovsdb-server stop
    after: [ovsdb-server]
    daemon: forking
    refresh-mode: endure
    plugs:
      - network
      - network-bind
      - network-control
      # NETLINK_NETFILTER SOCK_RAW sockets
      - firewall-control
      - openvswitch-support
      - process-control
      - system-trace
      - hardware-observe
      - hugepages-control
  ovsdb-server:
    command: bin/ovs-wrapper $SNAP/usr/share/openvswitch/scripts/ovs-ctl --no-ovs-vswitchd --no-monitor start
    stop-command: usr/share/openvswitch/scripts/ovs-ctl --no-ovs-vswitchd stop
    daemon: forking
    refresh-mode: endure
    plugs:
      - network
      - network-bind
      - network-control
      - openvswitch-support
      - process-control
      - system-trace

  # OVN
  ovn-controller:
    command: usr/share/ovn/scripts/ovn-ctl start_controller --no-monitor
    stop-command: usr/share/ovn/scripts/ovn-ctl stop_controller --no-monitor --restart
    daemon: forking
    refresh-mode: endure
    plugs:
      - network
      - network-bind
      - network-control
      - openvswitch-support
      - process-control
      - system-trace
      - hardware-observe
    after:
      - ovsdb-server
      - ovs-vswitchd

  # OVS/OVN cli tools
  ovn-appctl:
    command: usr/bin/ovn-appctl
    plugs:
      - network
      - network-bind
  ovn-trace:
    command: usr/bin/ovn-trace
    plugs:
      - network
      - network-bind
  # The 22.03 package does currently not include the ovn-detrace binary, put
  # this back once resolved. LP: #1971178
  # ovn-detrace:
  #   command: usr/bin/ovn-detrace
  #   plugs:
  #     - network
  #     - network-bind
  ovn-nbctl:
    command: usr/bin/ovn-nbctl
    plugs:
      - network
      - network-bind
  ovn-sbctl:
    command: usr/bin/ovn-sbctl
    plugs:
      - network
      - network-bind
      - process-control

  ovs-vsctl:
    command: usr/bin/ovs-vsctl
    plugs:
      - network
      - process-control
  ovs-appctl:
    command: usr/bin/ovs-appctl
    plugs:
      - network
      - process-control
  ovs-ofctl:
    command: usr/bin/ovs-ofctl
    plugs:
      - network
      - process-control
  ovs-dpctl:
    command: usr/bin/ovs-dpctl
    plugs:
      - network
      - process-control
  p4c:
    command: bin/p4c
  p4c-dpdk:
    command: bin/p4c-dpdk
  p4c-ebpf:
    command: bin/p4c-ebpf
  p4c-ubpf:
    command: bin/p4c-ubpf
  gnmi-cli:
    command: usr/bin/gnmi-cli
    plugs:
      - network
  ovs-p4ctl:
    command: usr/bin/ovs-p4ctl
    plugs:
      - network
  ovs-pipeline-builder:
    command: usr/bin/ovs_pipeline_builder

parts:
  # Python interpreter and common Python dependencies
  #
  # When using classic confinement, we need to bring our own Python
  # interpreter.  A side effect of that is that this part needs to be after
  # any part using the snapcraft python plugin, otherwise the presence of
  # the Python interpreter in the $CRAFT_PART_INSTALL tree will conflict with
  # per part virtualenv initialization.
  #
  # Once the stage environment is populated with a Python environment,
  # subsequent parts build sequences will use Python from the stage environment
  # and not from the build environment.  As a consequence we use stage-packages
  # for both build- and runtime Python dependencies.
  #
  # There is no de-duplication of stage-packages, and for python package
  # dependencies, most of them share a common set of indirect dependencies.
  #
  # In order to avoid multiple parts bringing in the same pacakges, we add
  # python stage-packages for all parts here.
  #
  # In addition to this provision, each `plugin: python` part will use the
  # `stage` keyword to only include the unique python package(s) brought
  # by the part.
  #
  # For any Python package brought in stricty for build purposes, we may choose
  # to prune its artifacts in a part rigged for execution late in the parts
  # lifecycle.
  python:
    after: [grpcio, ovspy, google-api-core, p4runtime]
    plugin: nil
    stage-packages:
      - libpython3.10
      - libpython3.10-minimal
      - libpython3.10-stdlib
      - python3-minimal
      - python3.10-minimal
      - python3.10-venv
      - meson
      - python3-pyelftools
      - python3-scapy
      - python3-six
      - python3-sortedcontainers
      - python3-sphinx
      - python3-sphinx-rtd-theme

  grpcio:
    after: [grpc]
    plugin: python
    source: https://github.com/google/grpc.git
    source-branch: v1.42.0
    python-requirements:
      - requirements.txt
    build-environment:
      - GRPC_PYTHON_BUILD_WITH_CYTHON: 1
      - GRPC_PYTHON_BUILD_SYSTEM_ZLIB: 1
      - GRPC_PYTHON_BUILD_SYSTEM_CARES: 1
      - GRPC_PYTHON_BUILD_SYSTEM_OPENSSL: 1
      - GRPC_PYTHON_ENABLE_DOCUMENTATION_BUILD: 1
    build-packages:
      - zlib1g-dev
      - libssl-dev
      - libre2-dev
      - libc-ares-dev
    stage:
      - lib/python3.10/site-packages/grpc*
      - lib/python3.10/site-packages/protobuf*
      - lib/python3.10/site-packages/google/protobuf

  ovspy:
    plugin: python
    source: https://github.com/kamaboko123/ovspy.git
    stage:
      - lib/python3.10/site-packages/ovspy*

  google-api-core:
    plugin: python
    source: https://github.com/googleapis/python-api-core.git
    source-branch: v1.33.2
    stage:
      - lib/python3.10/site-packages/google/rpc

  p4runtime:
    plugin: python
    source: https://github.com/p4lang/p4runtime.git
    source-branch: v1.4.0-rc.5
    source-subdir: py
    stage:
      - lib/python3.10/site-packages/p4

  abseil-cpp:
    plugin: cmake
    source: https://github.com/abseil/abseil-cpp.git
    source-branch: 20220623.1
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=""
      - -DCMAKE_CXX_STANDARD=17
    build-environment:
      - CXXFLAGS: "-fPIC"
    override-build: |
      craftctl default

  grpc:
    after: [abseil-cpp]
    plugin: cmake
    source: https://github.com/google/grpc.git
    source-branch: v1.42.0
    cmake-parameters:
      # The FindProtobuf CMake module looks for libraries in /lib
      - -DCMAKE_INSTALL_PREFIX=""
      - -DgRPC_INSTALL=ON
      - -DCMAKE_POSITION_INDEPENDENT_CODE=ON
      - -DgRPC_ABSL_PROVIDER=package
      - -DgRPC_CARES_PROVIDER=package
      - -DgRPC_RE2_PROVIDER=package
      - -DgRPC_SSL_PROVIDER=package
      - -DgRPC_ZLIB_PROVIDER=package
      - -DCMAKE_CXX_STANDARD=17
    build-packages:
      - zlib1g-dev
      - libssl-dev
      - libre2-dev
      - libc-ares-dev
    stage-packages:
      - libre2-9
      - libc-ares2


  p4c:
    after: [python, grpc]
    plugin: cmake
    source: https://github.com/p4lang/p4c.git
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=""
      - -DCMAKE_CXX_STANDARD=17
    build-environment:
      - LD_LIBRARY_PATH: $CRAFT_STAGE/lib
    build-packages:
      - cmake
      - g++
      - git
      - automake
      - libtool
      - libgc-dev
      - bison
      - flex
      - libfl-dev
      - libgmp-dev
      - libboost-dev
      - libboost-iostreams-dev
      - libboost-graph-dev
      - llvm
      - doxygen
      - graphviz
      - texlive-full
      - tcpdump
    stage-packages:
      - libboost-iostreams1.74.0
      - libboost-graph1.74.0
      - libgc1

  p4-dpdk-target:
    after: [python, p4c]
    plugin: autotools
    source: https://github.com/p4lang/p4-dpdk-target.git
    source-branch: v22.07
    autotools-configure-parameters:
      # The p4-dpdk-target project produces non-relocatable library archives,
      # so we need the prefix to point to the absolute path of the final
      # destination
      - --prefix=/snap/$CRAFT_PROJECT_NAME/current
    build-packages:
      - autoconf-archive
      - pkg-config
      - ninja-build
      - libedit-dev
    build-environment:
      - CFLAGS: "$CFLAGS -I/usr/include/python3.10 -I/snap/$CRAFT_PROJECT_NAME/current/include"
      - CXXFLAGS: "$CFLAGS -I/usr/include/python3.10 -I/snap/$CRAFT_PROJECT_NAME/current/include -std=c++17"
      - PKG_CONFIG_PATH: /snap/$CRAFT_PROJECT_NAME/current/lib/$CRAFT_ARCH_TRIPLET/pkgconfig:/snap/$CRAFT_PROJECT_NAME/current/lib/pkgconfig:$PKG_CONFIG_PATH
      - PYTHONPATH: $CRAFT_STAGE/usr/lib/python3.10:$CRAFT_STAGE/lib/python3.10/site-packages:$CRAFT_STAGE/usr/lib/python3/dist-packages:/snap/core22/current/usr/lib/python3.10:/snap/core22/current/usr/lib/python3/dist-packages
    override-build: |
      env
      # There is currently no way to influence build/install decisions for
      # the third-party submodules through the p4-dpdk-target build system,
      # so we need to patch it.
      patch -p1 < $CRAFT_PROJECT_DIR/patch/p4-dpdk-target-src-Makefile.am.patch
      patch -p1 < $CRAFT_PROJECT_DIR/patch/p4-dpdk-target-third-party-Makefile.am.patch
      patch -p1 < $CRAFT_PROJECT_DIR/patch/p4-dpdk-target-src-lld-dpdk-infra-Makefile.patch
      patch -p1 < $CRAFT_PROJECT_DIR/patch/p4-dpdk-target-bf_switchd-Makefile.am.patch

      # The p4-dpdk-target project produces non-relocatable library archives,
      # so we need the prefix to point to the absolute path of the final
      # destination.
      #
      # Due to a combination of inter-dependencies between modules built by
      # this part and build system not properly honoring redirection through
      # DESTDIR / SDE_INSTALL environment variables, creating a symlink from
      # final resting place in /snap/ to the $CRAFT_PART_INSTALL ensures built
      # artifacts end up in the expected location for further processing.
      rm -rf /snap/$CRAFT_PROJECT_NAME
      mkdir -p /snap/$CRAFT_PROJECT_NAME
      ln -sf $CRAFT_PART_INSTALL /snap/$CRAFT_PROJECT_NAME/current

      craftctl default

      rm -rf /snap/$CRAFT_PROJECT_NAME
    organize:
      snap/ovn-chassis/current: /

  nlohmann-json:
    after: [python]
    plugin: cmake
    source: https://github.com/nlohmann/json.git
    source-branch: v3.11.2
    cmake-parameters:
      - -DCMAKE_INSTALL_PREFIX=""
      - -DCMAKE_CXX_STANDARD=17

  ovs:
    after: [python, grpc, p4-dpdk-target, nlohmann-json, abseil-cpp]
    plugin: autotools
    source: https://github.com/ipdk-io/ovs.git
    source-type: git
    source-branch: ovs-with-p4
    build-environment:
      - CPPFLAGS: "$CPPFLAGS -I/snap/$CRAFT_PROJECT_NAME/current/include"
      - P4TDI_CFLAGS: -I/snap/$CRAFT_PROJECT_NAME/current/include
      - LIBS: $(pkg-config --libs grpc++)
      - PKG_CONFIG_PATH: /snap/$CRAFT_PROJECT_NAME/current/lib/$CRAFT_ARCH_TRIPLET/pkgconfig:/snap/$CRAFT_PROJECT_NAME/current/share/pkgconfig:/snap/$CRAFT_PROJECT_NAME/current/lib/pkgconfig:$PKG_CONFIG_PATH
      - LD_LIBRARY_PATH: /snap/$CRAFT_PROJECT_NAME/current/lib/$CRAFT_ARCH_TRIPLET:/snap/$CRAFT_PROJECT_NAME/current/lib
      - PYTHONPATH: $CRAFT_STAGE/usr/lib/python3.10:$CRAFT_STAGE/lib/python3.10/site-packages:$CRAFT_STAGE/usr/lib/python3/dist-packages:/snap/core22/current/usr/lib/python3.10:/snap/core22/current/usr/lib/python3/dist-packages
      - CONFIGURE_PARAMETERS: --prefix=/usr --localstatedir=/var --disable-ssl --sysconfdir=/etc --with-dpdk=shared --with-p4tdi=/snap/$CRAFT_PROJECT_NAME/current --with-sai
      - on s390x:
        - CONFIGURE_PARAMETERS: --prefix=/usr --localstatedir=/var --enable-ssl --sysconfdir=/etc
    override-build: |
      # These steps do what the upstream `apply_stratum_artifacts.sh` script
      # does, only in a relocatable fashion without polluting the build
      # environment.
      cd stratum
      git apply ../external/PATCH-01-STRATUM
      cd ..
      mkdir -p $CRAFT_PART_INSTALL/usr/share/stratum
      cp stratum/stratum/hal/bin/barefoot/tofino_skip_p4_no_bsp.conf \
          $CRAFT_PART_INSTALL/usr/share/stratum/tofino_skip_p4_no_bsp.conf
      cp external/dpdk_port_config.pb.txt \
          $CRAFT_PART_INSTALL//usr/share/stratum/dpdk_port_config.pb.txt

      # This is needed because of the p4-dpdk-target part, please refer to
      # comments with further explanation there.
      rm -rf /snap/$CRAFT_PROJECT_NAME
      mkdir -p /snap/$CRAFT_PROJECT_NAME
      ln -sf $CRAFT_STAGE /snap/$CRAFT_PROJECT_NAME/current

      ./boot.sh
      ./configure $CONFIGURE_PARAMETERS
      make -j$CRAFT_PARALLEL_BUILD_COUNT
      make install DESTDIR=$CRAFT_PART_INSTALL
      #make check TESTSUITEFLAGS="-j$CRAFT_PARALLEL_BUILD_COUNT"

      rm -rf /snap/$CRAFT_PROJECT_NAME
    build-packages:
      - autoconf
      - automake
      - bzip2
      - dh-python
      - graphviz
      - iproute2
      - libcap-ng-dev
      - libdbus-1-dev
      - libnuma-dev
      - libpcap-dev
      - libssl-dev
      - libtool
      - libunbound-dev
      - openssl
      - pkg-config
      - procps
      - docutils-common
      - docutils-doc
      - texlive-latex-base
      - texlive-latex-recommended
      - sphinx-common
      # P4 OVS
      - libnl-route-3-dev
      - libgflags-dev
      - libgoogle-glog-dev
      - googletest
      - libgmock-dev
    stage-packages:
      - libevent-2.1-7
      - libunbound8
      # DPDK
      - ibverbs-providers
      - libfdt1
      - libibverbs1
      - rdma-core
      - libnuma1
      - libatomic1
      - libpcap0.8
      # P4 OVS
      - libgoogle-glog0v5
      - libnl-route-3-200
      - libgflags2.2
    override-stage: |
      find $CRAFT_PART_INSTALL -type f -print0 | xargs -0 sed -i '1 s/^#\!.*python3$/#\!\/usr\/bin\/env python3/'
      craftctl default

  ovn:
    after: [python]
    plugin: autotools
    source: https://github.com/ovn-org/ovn.git
    source-type: git
    source-branch: branch-22.09
    build-environment:
      - PYTHONPATH: $CRAFT_STAGE/usr/lib/python3.10:$CRAFT_STAGE/lib/python3.10/site-packages:$CRAFT_STAGE/usr/lib/python3/dist-packages:/snap/core22/current/usr/lib/python3.10:/snap/core22/current/usr/lib/python3/dist-packages
    override-build: |
      # This OVS build is used as a build time dependency for OVN and not the
      # version installed.  See the `ovs` part above for the installed
      # artifact.
      cd ovs
      ./boot.sh
      ./configure \
        --prefix=/usr \
        --localstatedir=/var \
        --enable-ssl \
        --sysconfdir=/etc
      make -j$CRAFT_PARALLEL_BUILD_COUNT
      cd ..
      ./boot.sh
      ./configure \
        --prefix=/usr \
        --localstatedir=/var \
        --enable-ssl \
        --sysconfdir=/etc
      make -j$CRAFT_PARALLEL_BUILD_COUNT
      #make check RECHECK=yes TESTSUITEFLAGS="-j$CRAFT_PARALLEL_BUILD_COUNT"
      make install DESTDIR=$CRAFT_PART_INSTALL
    override-stage: |
      craftctl set version=$(git -C $CRAFT_PART_SRC describe --always | sed -e 's/-/+git/;y/-/./' | sed -s 's/^v//')
      craftctl default
    build-packages:
      - autoconf
      - automake
      - bzip2
      - graphviz
      - libcap-ng-dev
      - libnuma-dev
      - libpcap-dev
      - libssl-dev
      - libtool
      - libudev-dev
      - libunbound-dev
      - openssl
      - pkg-config
      - procps
      - tcpdump
      - docutils-common
      - docutils-doc
      - texlive-latex-base
      - texlive-latex-recommended
      - sphinx-common

  ovs-wrapper:
    source: ./snap/local/snap-wrappers/ovs
    plugin: dump
    organize:
      ovs-wrapper: bin/ovs-wrapper

  p4c-runtime-deps:
    after: [ovs]
    plugin: nil
    stage-packages:
      - g++

  patchelf:
    after: [p4c-runtime-deps]
    plugin: nil
    build-packages:
      - patchelf
      - file
    override-prime: |
      # patchelf
      #
      # To allow for a classic snap that works across multiple operating system
      # runtime environments, we need to ensure all shipped binaries consume
      # libraries from the core or shipped snap.  We accomplish this by
      # patching RPATH or interpreter into dynamically linked binaries.
      #
      # /snap/core22/current/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2
      # /snap/core22/current/lib/aarch64-linux-gnu/ld-linux-aarch64.so.1
      # /snap/core22/current/lib/powerpc64le-linux-gnu/ld64.so.2
      # /snap/core22/current/lib/s390x-linux-gnu/ld64.so.1
      interp_prefix=/snap/core22/current/lib/$CRAFT_ARCH_TRIPLET
      ld_arch=$(echo $CRAFT_TARGET_ARCH | sed -e 's,amd64,x86-64,' -e 's,arm64,aarch64,')
      for interp in "ld-linux-${ld_arch}.so.?" "ld64.so.?" "/dev/null"; do
          if [ -e ${interp_prefix}/${interp} ]; then
              break
          fi
      done
      if [ $interp = /dev/null ]; then
          echo "Unable to determine name of shared library interpreter."
          exit 1
      fi

      for binary in \
        $(find . -exec file {} \; | awk -F\: '/ELF.*dynamic/{print$1}'); do
          patchelf \
              --force-rpath \
              --set-rpath /snap/core22/current/usr/lib/$CRAFT_ARCH_TRIPLET:/snap/$CRAFT_PROJECT_NAME/current/lib:/snap/$CRAFT_PROJECT_NAME/current/lib/$SNAPCRAFT_ARCH_TRIPLET:/snap/$CRAFT_PROJECT_NAME/current/usr/lib:/snap/$CRAFT_PROJECT_NAME/current/usr/lib/$SNAPCRAFT_ARCH_TRIPLET \
              $binary

          patchelf --set-interpreter $interp_prefix/$interp $binary || true
      done
